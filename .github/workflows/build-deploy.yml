name: Build and Deploy

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    name: Build
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Login to Docker Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ secrets.DOCKER_REGISTRY }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: |
            ${{ secrets.DOCKER_REGISTRY }}/kmitl-fullstack-b/fullstack-b-2567-frontend:${{ github.sha }}
            ${{ secrets.DOCKER_REGISTRY }}/kmitl-fullstack-b/fullstack-b-2567-frontend:latest
          cache-from: type=registry,ref=${{ secrets.DOCKER_REGISTRY }}/kmitl-fullstack-b/fullstack-b-2567-frontend:buildcache
          cache-to: type=registry,ref=${{ secrets.DOCKER_REGISTRY }}/kmitl-fullstack-b/fullstack-b-2567-frontend:buildcache,mode=max

  deploy:
    name: Deploy
    needs: build
    runs-on: ubuntu-24.04
    steps:
      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Create docker-compose.yml
        run: |
          cat > docker-compose.yml << EOF
          version: "3"
          services:
            frontend:
              image: ${{ secrets.DOCKER_REGISTRY }}/kmitl-fullstack-b/fullstack-b-2567-frontend:${{ github.sha }}
              restart: always
              ports:
                - "9000:80"
              env_file:
                - .env-frontend
              healthcheck:
                test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/health"]
                interval: 30s
                timeout: 10s
                retries: 3
                start_period: 10s
          EOF

      - name: Copy docker-compose.yml to server
        run: scp -o StrictHostKeyChecking=no docker-compose.yml ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:~/app/

      - name: Deploy to VPS
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} '
            set -e

            echo "=== Deployment Started ==="
            cd ~/app

            echo "Docker login..."
            docker login ${{ secrets.DOCKER_REGISTRY }} -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}

            echo "Pulling latest image..."
            docker pull ${{ secrets.DOCKER_REGISTRY }}/kmitl-fullstack-b/fullstack-b-2567-frontend:${{ github.sha }}

            echo "Deploying app..."
            docker-compose down
            docker-compose up -d

            echo "Cleaning up old Docker images..."
            # ล้าง dangling images
            docker image prune -f
            
            # เก็บ ID ของ images ที่กำลังใช้งานอยู่เพื่อไม่ลบ
            USED_IMAGE=$(docker inspect --format="{{.Image}}" $(docker-compose ps -q))
            
            # ลบ images เก่าที่เฉพาะเจาะจงของ repository นี้ และไม่ได้ใช้งานอยู่ (เก็บไว้ 3 เวอร์ชันล่าสุด)
            docker images "${{ secrets.DOCKER_REGISTRY }}/kmitl-fullstack-b/fullstack-b-2567-frontend" --format "{{.ID}} {{.Repository}}:{{.Tag}}" | 
            grep -v "latest" | 
            sort -r | 
            tail -n +4 | 
            while read IMAGE_ID IMAGE_NAME; do
              if [ "$IMAGE_ID" != "$USED_IMAGE" ]; then
                echo "Removing old image: $IMAGE_NAME"
                docker rmi $IMAGE_ID || true
              else
                echo "Skipping image in use: $IMAGE_NAME"
              fi
            done

            echo "✅ Deployment complete!"
          '